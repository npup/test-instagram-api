// for eslint v0.21.0
{
  "env": {
      "browser": true // - browser global variables.
      , "node": true // - Node.js global variables and Node.js-specific rules.
      , "mocha": true // - adds all of the Mocha testing global variables.
    }

  , "globals": {
      "console": true
    }

  , "ecmaFeatures": {
      "modules": true
      , "blockBindings": true
      , "arrowFunctions": true
      , "defaultParams": true
      , "objectLiteralShorthandProperties": true
      , "objectLiteralShorthandMethods": true
      , "templateStrings": true
    }

  , "rules": {

    // Possible Errors
    "no-cond-assign": 0 // - disallow assignment in conditional expressions
    , "no-console": 1 // - disallow use of console (off by default in the node environment)
    , "no-constant-condition": 2 // - disallow use of constant expressions in conditions
    , "no-comma-dangle": 2 // - disallow trailing commas in object literals
    , "no-control-regex": 2 // - disallow control characters in regular expressions
    , "no-debugger": 2 // - disallow use of debugger
    , "no-dupe-keys": 2 // - disallow duplicate keys when creating object literals
    , "no-empty": 2 // - disallow empty statements
    , "no-empty-class": 2 // - disallow the use of empty character classes in regular expressions
    , "no-ex-assign": 2 // - disallow assigning to the exception in a catch block
    , "no-extra-boolean-cast": 2 // - disallow double-negation boolean casts in a boolean context
    , "no-extra-parens": 2 // - disallow unnecessary parentheses (off by default)
    , "no-extra-semi": 2 // - disallow unnecessary semicolons
    , "no-func-assign": 2 // - disallow overwriting functions written as function declarations
    , "no-inner-declarations": 2 // - disallow function or variable declarations in nested blocks
    , "no-invalid-regexp": 2 // - disallow invalid regular expression strings in the RegExp constructor
    , "no-negated-in-lhs": 2 // - disallow negation of the left operand of an in expression
		, "no-obj-calls": 1 // - disallow the use of object properties of the global object (Math and JSON) as functions
		, "no-regex-spaces": 2 // - disallow multiple spaces in a regular expression literal
    , "no-reserved-keys": 2 // - disallow reserved words being used as object literal keys (off by default)
		, "no-sparse-arrays": 2 // - disallow sparse arrays
		, "no-unreachable": 2 // - disallow unreachable statements after a return, throw, continue, or break statement
		, "use-isnan": 2 // - disallow comparisons with the value NaN
		, "valid-jsdoc": 0 // - Ensure JSDoc comments are valid (off by default)
		, "valid-typeof": 2 // - Ensure that the results of typeof are compared against a valid string


    // Best Practices
		, "block-scoped-var": 2 // - treat var statements as if they were block scoped (off by default)
		, "complexity": [1, 5] // - specify the maximum cyclomatic complexity allowed in a program (off by default)
		, "consistent-return": 2 // - require return statements to either always or never specify values
		, "curly": 0 // - specify curly brace conventions for all control statements
		, "default-case": 2 // - require default case in switch statements (off by default)
		, "dot-notation": 2 // - encourages use of dot notation whenever possible
		, "eqeqeq": 0 // - require the use of === and !==
		, "guard-for-in": 0 // - make sure for-in loops have an if statement (off by default)
		, "no-alert": 2 // - disallow the use of alert, confirm, and prompt
		, "no-caller": 2 // - disallow use of arguments.caller or arguments.callee
		, "no-div-regex": 2 // - disallow division operators explicitly at beginning of regular expression (off by default)
		, "no-else-return": 2 // - disallow else after a return in an if (off by default)
		, "no-empty-label": 2 // - disallow use of labels for anything other then loops and switches
		, "no-eq-null": 0 // - disallow comparisons to null without a type-checking operator (off by default)
		, "no-eval": 0 // - disallow use of eval()
		, "no-extend-native": 2 // - disallow adding to native types
		, "no-extra-bind": 2 // - disallow unnecessary function binding
		, "no-fallthrough": 2 // - disallow fallthrough of case statements
		, "no-floating-decimal": 0 // - disallow the use of leading or trailing decimal points in numeric literals (off by default)
		, "no-implied-eval": 2 // - disallow use of eval()-like methods
		, "no-labels": 0 // - disallow use of labeled statements
		, "no-iterator": 2 // - disallow usage of __iterator__ property
		, "no-lone-blocks": 2 // - disallow unnecessary nested blocks
		, "no-loop-func": 2 // - disallow creation of functions within loops
		, "no-multi-str": 2 // - disallow use of multiline strings
		, "no-native-reassign": 2 // - disallow reassignments of native objects
		, "no-new": 2 // - disallow use of new operator when not part of the assignment or comparison
		, "no-new-func": 0 // - disallow use of new operator for Function object
		, "no-new-wrappers": 2 // - disallows creating new instances of String,Number, and Boolean
		, "no-octal": 2 // - disallow use of octal literals
		, "no-octal-escape": 2 // - disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
		, "no-proto": 2 // - disallow usage of __proto__ property
		, "no-redeclare": 2 // - disallow declaring the same variable more then once
		, "no-return-assign": 0 // - disallow use of assignment in return statement
		, "no-script-url": 2 // - disallow use of javascript: urls.
		, "no-self-compare": 0 // - disallow comparisons where both sides are exactly the same (off by default)
		, "no-sequences": 0 // - disallow use of comma operator
		, "no-unused-expressions": 0 // - disallow usage of expressions in statement position
		, "no-void": 0 // - disallow use of void operator (off by default)
		, "no-warning-comments": [1, {
        "terms": ["todo", "fixme", "xxx"]
        , "location": "anywhere"
      }] // - disallow usage of configurable warning terms in comments - e.g. TODO or FIXME (off by default)
		, "no-with": 1 // - disallow use of the with statement
		, "radix": 2 // - require use of the second argument for parseInt() (off by default)
		, "vars-on-top": 0 // - requires to declare all the vars on top of function scope (off by default)
		, "wrap-iife": [2, "outside"] // - require immediate function invocation to be wrapped in parentheses (off by default)
		, "yoda": [2, "always"] // - require or disallow Yoda conditions


    // Strict Mode
		, "global-strict": 0 // - require or disallow the "use strict" pragma in the global scope (off by default in the node environment)
		, "no-extra-strict": 2 // - disallow unnecessary use of "use strict"; when already in strict mode
		, "strict": 0 // - require that all functions are run in strict mode


    // Variables
		, "no-catch-shadow": 2 // - disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
		, "no-delete-var": 2 // - disallow deletion of variables
		, "no-label-var": 2 // - disallow labels that share a name with a variable
		, "no-shadow": 0 // - disallow declaration of variables already declared in the outer scope
		, "no-shadow-restricted-names": 2 // - disallow shadowing of names such as arguments
		, "no-undef": 2 // - disallow use of undeclared variables unless mentioned in a /*global */ block
		, "no-undefined": 2 // - disallow use of undefined variable (off by default)
		, "no-undef-init": 2 // - disallow use of undefined when initializing variables
		, "no-unused-vars": [2, {
        "vars": "all"
        , "args": "after-used"
      }] // - disallow declaration of variables that are not used in the code
		, "no-use-before-define": 2 // - disallow use of variables before they are defined


    // node.js specific
		, "handle-callback-err": [2, "^(err|error)$"] // - enforces error handling in callbacks (off by default) (on by default in the node environment)
		, "no-mixed-requires": [0, false] // - disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
		, "no-new-require": 2 // - disallow use of new operator with the require function (off by default) (on by default in the node environment)
		, "no-path-concat": 2 // - disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
		, "no-process-exit": 2 // - disallow process.exit() (on by default in the node environment)
		, "no-restricted-modules": [0, "fs", "os", "etc,etc"] // - restrict usage of specified node modules (off by default)
		, "no-sync": 1 // - disallow use of synchronous methods (off by default)


    // Stylistic Issues
		, "brace-style": [2, "stroustrup", {
        "allowSingleLine": true
      }] // - enforce one true brace style (off by default)
		, "camelcase": 2 // - require camel case names
		, "consistent-this": [0, "self"] // - enforces consistent naming when capturing the current execution context (off by default)
		, "eol-last": 2 // - enforce newline at the end of file, with no multiple empty lines
		, "func-names": 0 // - require function expressions to have a name (off by default)
		, "func-style": 0 // - enforces use of function declarations or expressions (off by default)
		, "new-cap": 2 // - require a capital letter for constructors
		, "new-parens": 0 // - disallow the omission of parentheses when invoking a constructor with no arguments
		, "no-nested-ternary": 0 // - disallow nested ternary expressions (off by default)
		, "no-array-constructor": 0 // - disallow use of the Array constructor
		, "no-lonely-if": 2 // - disallow if as the only statement in an else block (off by default)
		, "no-new-object": 2 // - disallow use of the Object constructor
		, "no-spaced-func": 2 // - disallow space between function identifier and application
		, "no-space-before-semi": 2 // - disallow space before semicolon
		, "semi-spacing": [0, {
        "before": true
        , "after": false
      }] // - enforce spacing before and after semicolons
		, "no-ternary": 0 // - disallow the use of ternary operators (off by default)
		, "no-trailing-spaces": 2 // - disallow trailing whitespace at the end of lines
		, "no-underscore-dangle": 0 // - disallow dangling underscores in identifiers
		, "no-wrap-func": 2 // - disallow wrapping of non-IIFE statements in parens
		, "no-mixed-spaces-and-tabs": 2 // - disallow mixed spaces and tabs for indentation
		, "quotes": [2, "double"] // - specify whether double or single quotes should be used
		, "quote-props": 2 // - require quotes around object literal property names (off by default)
		, "semi": 2 // - require or disallow use of semicolons instead of ASI
		, "sort-vars": 0 // - sort variables within the same declaration block (off by default)
		, "space-after-keywords": [2, "always"] // - require a space after certain keywords (off by default)
		, "space-in-brackets": [0, "always"] // - require or disallow spaces inside brackets (off by default)
		, "space-in-parens": [0, "never"] // - require or disallow spaces inside parentheses (off by default)
		, "space-infix-ops": 0 // - require spaces around operators
		, "space-return-throw-case": 2 // - require a space after return, throw, and case
		, "space-unary-ops": 2 // - require a space around word operators such as typeof (off by default)
		, "max-nested-callbacks": [1, 3] // - specify the maximum depth callbacks can be nested (off by default)
		, "one-var": 0 // - allow just one var statement per function (off by default)
		, "wrap-regex": 0 // - require regex literals to be wrapped in parentheses (off by default)

  }
}
